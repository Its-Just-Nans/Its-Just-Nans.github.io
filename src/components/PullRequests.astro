---
import OpenInNewTab from "./OpenInNewTab.astro";
//@ts-ignore
import { output as pulls } from "../../data/pull_requests/index";
//@ts-ignore
import NotGithub from "../../data/pull_requests/not_github.json";

interface PullRequest {
    node: Node;
}

interface Node {
    id: string;
    number: number;
    title: string;
    url: string;
    state: string;
    createdAt: string;
    baseRepository: {
        url: string;
        name: string;
        description: string;
        owner: {
            login: string;
        };
        languages: {
            nodes?:
                | {
                      name: string;
                  }[]
                | null;
        };
    };
}

const CLEANER = ["https://github.com/Its-Just-Nans", "https://github.com/Bel-Art"];

//@ts-ignore
const allPulls = (pulls as PullRequest[]).concat(NotGithub as PullRequest[]);

type RepoType = Record<string, Node[]>;

const repos = allPulls.reduce((acc, { node }) => {
    const { baseRepository, state } = node;
    const { url } = baseRepository;
    if (state !== "MERGED") {
        return acc;
    }
    if (CLEANER.some((oneUrl) => url.startsWith(oneUrl))) {
        return acc;
    }
    if (!acc[url]) {
        acc[url] = [];
    }
    acc[url].push(node);
    return acc;
}, {} as RepoType);

// const allTotal = pulls.length;
const totalMergedCount = allPulls.filter(({ node }) => node.state === "MERGED").length; // note:this is the filtered count
// const repoTotal = Object.values(repos).flat(1).length;
---

<div class="pulls">
    <div class="stats">
        <h2>PRs</h2>
        <p>
            Total: {totalMergedCount}
        </p>
    </div>
    {
        Object.entries(repos).map(([url, pullsList]) => {
            return (
                <div>
                    <details>
                        <summary>
                            <span>{url}</span>
                            <a href={`${url}/pulls?q=author%3AIts-Just-Nans`} target="_blank">
                                <OpenInNewTab width="12px" height="12px" />
                            </a>
                            <span>({pullsList.length})</span>
                        </summary>

                        <div>
                            {pullsList.map(({ title, url, createdAt }) => (
                                <p class="pull">
                                    <a href={url} target="_blank">
                                        {createdAt.slice(0, 10)} - {title}
                                    </a>
                                </p>
                            ))}
                        </div>
                    </details>
                </div>
            );
        })
    }
</div>

<style>
    summary {
        cursor: pointer;
    }
    .pulls {
        text-align: left;
        overflow-wrap: break-word;
    }
    .pull {
        margin: 1px 10px;
        color: blue;
    }
    .stats {
        text-align: center;
    }
</style>
