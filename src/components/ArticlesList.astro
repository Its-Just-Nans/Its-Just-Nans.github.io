---
import { getArticleDate, slugify } from "../components/utils";
import type { ArticleType } from "../components/utils";
import Time from "./Time.astro";

interface Props {
    articles: ArticleType[];
    drafts?: ArticleType[];
    isAll?: boolean;
}

const { articles = [], drafts = [], isAll = false } = Astro.props;

const allArticles = articles;
const nbDraft = drafts.length;
if (import.meta.env.DEV) {
    Array.prototype.unshift.apply(allArticles, drafts);
}
---

<article>
    {
        isAll && (
            <>
                <div class="draft">
                    <div>
                        {nbDraft > 0 && (
                            <>
                                <span>
                                    {nbDraft} draft{nbDraft > 1 && "s"}
                                </span>
                                <br />
                            </>
                        )}
                        <a href="/articles/rss.xml" target="_blank" class="more-link">
                            <span>RSS Feed to wait</span>
                        </a>
                        <a href="https://golb.n4n5.dev" target="_blank" class="more-link">
                            <span>golb</span>
                        </a>
                        <a href="https://yakb.n4n5.dev" target="_blank" class="more-link">
                            <span>yakb</span>
                        </a>
                    </div>
                </div>
                <br />
            </>
        )
    }

    {
        allArticles.map((element) => {
            const { description, title, draft, hidden, tags } = element.frontmatter;
            const date = getArticleDate(element.frontmatter);
            const isSmall = Array.isArray(tags);
            const slug = slugify(element.url);
            const realDate = new Date(date || new Date());
            return (
                <a href={`/articles/${slug}/`}>
                    <div class="oneArticle" class:list={[{ coloredArticle: draft }]}>
                        <div class:list={["flexed", { "hidden-class": hidden }]}>
                            <div class="articleTitleDiv">
                                <span class="articleTitle">{title}</span>
                                {!isSmall &&
                                (
                                    <span> - </span>
                                    <span class="articleDesc">{description}</span>
                                )}
                            </div>
                            <p class="timestamp">
                                <Time date={realDate} />
                            </p>
                        </div>
                        {(hidden || draft) && (
                            <div class="flexed">
                                <p class:list={["flexed", { "hidden-class": hidden }]}>
                                    {hidden && <span class="hidden-span">(hidden)</span>}
                                    {draft && <span class="draft-span">(draft)</span>}
                                </p>
                            </div>
                        )}
                    </div>
                </a>
            );
        })
    }
</article>

<style>
    .more-link:hover {
        text-decoration: underline;
    }
    .more-link {
        display: block;
        color: blue;
    }
    .draft {
        display: flex;
        justify-content: center;
    }
    .draft div {
        border: 1px solid black;
        border-radius: 5px;
        padding: 10px;
        text-align: center;
        background-color: var(--globalColor);
        width: 50%;
    }
    @keyframes rainbow_animation {
        0%,
        100% {
            background-position: 0 0;
        }

        50% {
            background-position: 100% 0;
        }
    }
    .hidden-class {
        animation: rainbow_animation 6s ease-in-out infinite;
        background: linear-gradient(to right, #6666ff, #0099ff, #00ff00, #ff3399, #6666ff);
        -webkit-background-clip: text;
        background-clip: text;
        color: transparent;
        background-size: 400% 100%;
    }
    .draft-span {
        color: red;
    }
    .flexed {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    .flexed .timestamp {
        text-align: end;
    }
    .articleTitle {
        font-weight: bold;
        display: inline;
    }
    .articleTitleDiv {
        display: inline-block;
    }
    .oneArticle {
        --padding1: 10px;
        --padding2: 20px;
        margin-bottom: 20px;
    }
    .oneArticle {
        display: block;
        padding: var(--padding1) var(--padding2);
        border: var(--border) solid var(--globalColor);
        --border: 2px;
        border-radius: 5px;
    }
    .oneArticle p {
        margin: 5px;
    }
    .coloredArticle {
        background-color: color-mix(in srgb, var(--globalColor), white 50%);
    }
    .oneArticle:hover {
        --border2: calc(var(--border) + var(--border));
        --paddingHover1: calc(var(--padding1) - var(--border));
        --paddingHover2: calc(var(--padding2) - var(--border));
        padding: var(--paddingHover1) var(--paddingHover2);
        border: var(--border2) solid var(--globalColor);
    }
</style>
