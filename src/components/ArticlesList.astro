---
const { articles, nbDraft = 0 } = Astro.props;
---

<article>
    {
        nbDraft > 0 && (
            <>
                <div class="draft">
                    <div>
                        <span>
                            {nbDraft} draft{nbDraft > 1 && "s"} !
                        </span>
                    </div>
                </div>
                <br />
            </>
        )
    }
    {
        articles.map((element) => {
            const { date, description, title, draft, hidden } = element.frontmatter;
            const slug = element.url.split("/").pop().split(".").shift();
            const realDate = new Date(date || new Date());
            const fmt = realDate.toLocaleDateString("fr-FR", {
                year: "numeric",
                month: "numeric",
                day: "numeric",
            });
            return (
                <a href={`/articles/${slug}`}>
                    <div class="oneArticle">
                        <div class:list={["flexed", { "hidden-class": hidden }]}>
                            <p class="articleTitle">
                                <span>{title}</span>
                            </p>
                            <p class="timestamp">
                                <time datetime={realDate.toISOString()}>{fmt}</time>
                            </p>
                        </div>
                        <div class="flexed">
                            <p class="articleDesc">{description}</p>
                            <p class:list={["flexed", { "hidden-class": hidden }]}>
                                {hidden && <span class="hidden-span">(hidden)</span>}
                                {draft && <span class="draft-span">(draft)</span>}
                            </p>
                        </div>
                    </div>
                </a>
            );
        })
    }
</article>

<style>
    .draft {
        display: flex;
        justify-content: center;
    }
    .draft div {
        border: 1px solid black;
        border-radius: 5px;
        padding: 10px;
        text-align: center;
        background-color: var(--globalColor);
        width: 50%;
    }
    @keyframes rainbow_animation {
        0%,
        100% {
            background-position: 0 0;
        }

        50% {
            background-position: 100% 0;
        }
    }
    .hidden-class {
        animation: rainbow_animation 6s ease-in-out infinite;
        background: linear-gradient(to right, #6666ff, #0099ff, #00ff00, #ff3399, #6666ff);
        -webkit-background-clip: text;
        background-clip: text;
        color: transparent;
        background-size: 400% 100%;
    }
    .draft-span {
        color: red;
    }
    .flexed {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }
    .flexed .timestamp {
        text-align: end;
    }
    .articleDesc {
        display: block;
    }
    .articleTitle {
        font-weight: bold;
        display: inline;
    }
    .oneArticle {
        --padding1: 10px;
        --padding2: 20px;
        display: block;
        margin-bottom: 20px;
        padding: var(--padding1) var(--padding2);
        --border: 2px;
        border: var(--border) solid var(--globalColor);
        border-radius: 5px;
    }
    .oneArticle:hover {
        --border2: calc(var(--border) + var(--border));
        --paddingHover1: calc(var(--padding1) - var(--border));
        --paddingHover2: calc(var(--padding2) - var(--border));
        padding: var(--paddingHover1) var(--paddingHover2);
        border: var(--border2) solid var(--globalColor);
    }
</style>
